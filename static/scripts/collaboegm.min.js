var egrid;
(function (egrid) {
    (function (app) {
        (function (modules) {
            angular.module('paginator.filters', []).filter('pager', function () {
                return function (input, currentPage, itemsPerPage) {
                    var begin = (currentPage - 1) * itemsPerPage;

                    return input.slice(begin, begin + itemsPerPage);
                };
            });
            angular.module('paginator', ['paginator.filters']);
        })(app.modules || (app.modules = {}));
        var modules = app.modules;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ControllerBase = (function () {
            function ControllerBase($rootScope, $timeout, $filter, alertLifeSpan) {
                this.$rootScope = $rootScope;
                this.$timeout = $timeout;
                this.$filter = $filter;
                this.alertLifeSpan = alertLifeSpan;
            }
            ControllerBase.prototype.showAlert = function (key, type) {
                if (typeof type === "undefined") { type = 'success'; }
                var _this = this;
                this.$rootScope.alerts[0] = { type: type, msg: this.$filter('translate')(key) };

                this.$timeout(function () {
                    _this.$rootScope.alerts.pop();
                }, this.alertLifeSpan);
            };
            return ControllerBase;
        })();
        app.ControllerBase = ControllerBase;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var Url = (function () {
            function Url() {
            }
            Url.participantUrl = function (arg, participantKey, action) {
                var projectKey;
                if (typeof participantKey !== 'string') {
                    projectKey = arg.projectKey;
                    participantKey = arg.key();
                } else {
                    projectKey = arg;
                }
                return action ? '/projects/' + projectKey + '/participants/' + participantKey + '/' + action : '/projects/' + projectKey + '/participants/' + participantKey;
            };

            Url.participantGridUrl = function (arg, participantKey) {
                return Url.participantUrl(arg, participantKey) + '/grid';
            };

            Url.projectListUrl = function () {
                return Url.projectListUrlBase;
            };

            Url.projectUrl = function (project, action) {
                var result;

                if (project instanceof egrid.model.Project) {
                    result = '/projects/' + project.key();
                } else {
                    result = '/projects/' + project;
                }

                return action ? result + '/' + action : result;
            };

            Url.projectGridUrl = function (arg, projectGridKey) {
                var projectKey;
                if (projectGridKey === undefined) {
                    projectKey = arg.projectKey;
                    projectGridKey = arg.key;
                } else {
                    projectKey = arg;
                }
                return '/projects/' + projectKey + '/grid/' + projectGridKey;
            };

            Url.semProjectUrl = function (semProject, action) {
                return action ? '/projects/' + semProject.projectKey + '/sem-projects/' + semProject.key + '/' + action : '/projects/' + semProject.projectKey + '/sem-projects/' + semProject.key;
            };
            Url.participantUrlBase = '/projects/:projectId/participants/:participantId';
            Url.participantGridUrlBase = '/projects/:projectId/participants/:participantId/grid';
            Url.projectUrlBase = '/projects/:projectId';
            Url.projectGridUrlBase = '/projects/:projectKey/grid/:projectGridKey';
            Url.projectGridListUrlBase = '/projects/:projectKey/grid';
            Url.projectListUrlBase = '/projects';
            Url.semProjectUrlBase = '/projects/:projectId/sem-projects/:semProjectId';
            return Url;
        })();
        app.Url = Url;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var egrid;
(function (egrid) {
    (function (app) {
        var CollaboratorCreateController = (function (_super) {
            __extends(CollaboratorCreateController, _super);
            function CollaboratorCreateController($q, $rootScope, $stateParams, $state, $timeout, $filter, alertLifeSpan) {
                _super.call(this, $rootScope, $timeout, $filter, alertLifeSpan);
                this.$q = $q;
                this.$state = $state;

                this.projectKey = $stateParams.projectId;
                this.data = new egrid.model.Collaborator({ projectKey: this.projectKey });
            }
            CollaboratorCreateController.prototype.submit = function () {
                var _this = this;
                this.$q.when(this.data.save()).then(function () {
                    _this.$timeout(function () {
                        _this.$state.go('projects.get.collaborators.all.list', null, { reload: true });

                        _this.showAlert('MESSAGES.OPERATION_SUCCESSFULLY_COMPLETED');
                    }, 200);
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    var k = reasons[0].status === 401 ? 'MESSAGES.NOT_AUTHENTICATED' : 'MESSAGES.DESTINATION_IS_NOT_REACHABLE';

                    _this.showAlert(k, 'danger');
                });
            };
            CollaboratorCreateController.$inject = ['$q', '$rootScope', '$stateParams', '$state', '$timeout', '$filter', 'alertLifeSpan'];
            return CollaboratorCreateController;
        })(egrid.app.ControllerBase);
        app.CollaboratorCreateController = CollaboratorCreateController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var CollaboratorListController = (function () {
            function CollaboratorListController($window, $q, $rootScope, $stateParams, $state, $scope, $modal) {
                var _this = this;
                this.$window = $window;
                this.$q = $q;
                this.$rootScope = $rootScope;
                this.$state = $state;
                this.$scope = $scope;
                this.$modal = $modal;
                this.collaborators = new egrid.model.CollaboratorCollection();
                this.projectId = $stateParams.projectId;

                $q.when(this.collaborators.query(this.projectId)).then(function (collaborators) {
                    Object.keys(collaborators).forEach(function (v, i, ar) {
                        _this.collaborators.addItem(collaborators[v]);
                    });
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    if (reasons[0]['status'] === 401) {
                        _this.$window.location.href = _this.$rootScope.logoutUrl;
                    }
                });
            }
            CollaboratorListController.prototype.confirm = function (key) {
                var _this = this;
                var modalInstance = this.$modal.open({
                    templateUrl: '/partials/remove-item-dialog.html',
                    controller: function ($scope, $modalInstance) {
                        $scope.ok = function () {
                            $modalInstance.close();
                        }, $scope.cancel = function () {
                            $modalInstance.dismiss();
                        };
                    }
                });

                modalInstance.result.then(function () {
                    _this.remove(key);
                });
            };

            CollaboratorListController.prototype.remove = function (key) {
                var _this = this;
                this.$q.when(this.collaborators.getItem(key).remove()).then(function () {
                    _this.collaborators.removeItem(key);
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    if (reasons[0]['status'] === 401) {
                        _this.$window.location.href = _this.$rootScope.logoutUrl;
                    }
                });
            };
            CollaboratorListController.$inject = ['$window', '$q', '$rootScope', '$stateParams', '$state', '$scope', '$modal'];
            return CollaboratorListController;
        })();
        app.CollaboratorListController = CollaboratorListController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ParticipantController = (function (_super) {
            __extends(ParticipantController, _super);
            function ParticipantController($window, $q, $rootScope, $stateParams, $state, $scope, $modal, $timeout, $filter, alertLifeSpan) {
                var _this = this;
                _super.call(this, $rootScope, $timeout, $filter, alertLifeSpan);
                this.$window = $window;
                this.$q = $q;
                this.$state = $state;
                this.$scope = $scope;
                this.$modal = $modal;

                this.participant = new egrid.model.Participant({ projectKey: $stateParams.projectId });

                this.$q.when(this.participant.get($stateParams.participantId)).then(function (p) {
                }, function (reason) {
                    if (reason.status === 401) {
                        _this.$window.location.href = _this.$rootScope.logoutUrl;
                    }

                    if (reason.status === 404 || reason.status === 500) {
                        _this.$state.go('projects.get.participants.all.list');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });
            }
            ParticipantController.prototype.update = function () {
                var _this = this;
                this.$q.when(this.participant.save()).then(function (participant) {
                    _this.participant.name = participant.name;
                    _this.participant.note = participant.note;
                }, function (reason) {
                    if (reason.status === 401) {
                        _this.$window.location.href = _this.$rootScope.logoutUrl;
                    }

                    if (reason.status === 404 || reason.status === 500) {
                        _this.$state.go('projects.get.participants.all.list');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });
            };

            ParticipantController.prototype.confirm = function () {
                var _this = this;
                var modalInstance = this.$modal.open({
                    templateUrl: '/partials/remove-item-dialog.html',
                    controller: function ($scope, $modalInstance) {
                        $scope.ok = function () {
                            $modalInstance.close();
                        }, $scope.cancel = function () {
                            $modalInstance.dismiss();
                        };
                    }
                });

                modalInstance.result.then(function () {
                    _this.remove();
                });
            };

            ParticipantController.prototype.remove = function () {
                var _this = this;
                this.$q.when(this.participant.remove()).then(function () {
                    _this.$state.go('projects.get.participants.all.list');
                }, function (reason) {
                    if (reason.status === 401) {
                        _this.$window.location.href = _this.$rootScope.logoutUrl;
                    }

                    if (reason.status === 404 || reason.status === 500) {
                        _this.$state.go('projects.get.participants.all.list');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });
            };
            ParticipantController.$inject = ['$window', '$q', '$rootScope', '$stateParams', '$state', '$scope', '$modal', '$timeout', '$filter', 'alertLifeSpan'];
            return ParticipantController;
        })(egrid.app.ControllerBase);
        app.ParticipantController = ParticipantController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ParticipantCreateController = (function (_super) {
            __extends(ParticipantCreateController, _super);
            function ParticipantCreateController($q, $rootScope, $stateParams, $state, $timeout, $filter, alertLifeSpan) {
                _super.call(this, $rootScope, $timeout, $filter, alertLifeSpan);
                this.$q = $q;
                this.$state = $state;

                this.projectKey = $stateParams.projectId;
            }
            ParticipantCreateController.prototype.submit = function () {
                var _this = this;
                var participant = new egrid.model.Participant(this);
                this.$q.when(participant.save()).then(function (p) {
                    _this.$state.go('projects.get.participants.get.detail', { projectId: _this.projectKey, participantId: p.key });

                    _this.showAlert('MESSAGES.OPERATION_SUCCESSFULLY_COMPLETED');
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    var k = reasons[0].status === 401 ? 'MESSAGES.NOT_AUTHENTICATED' : 'MESSAGES.DESTINATION_IS_NOT_REACHABLE';

                    _this.showAlert(k, 'danger');
                });
            };
            ParticipantCreateController.$inject = ['$q', '$rootScope', '$stateParams', '$state', '$timeout', '$filter', 'alertLifeSpan'];
            return ParticipantCreateController;
        })(egrid.app.ControllerBase);
        app.ParticipantCreateController = ParticipantCreateController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ParticipantGridController = (function (_super) {
            __extends(ParticipantGridController, _super);
            function ParticipantGridController($window, $q, $rootScope, $stateParams, $state, $scope, $timeout, $filter, alertLifeSpan) {
                var _this = this;
                _super.call(this, $rootScope, $timeout, $filter, alertLifeSpan);

                this.projectKey = $stateParams.projectId;
                this.participantKey = $stateParams.participantId;
                this.egm = new EGM;

                $q.when(egrid.model.ParticipantGrid.get(this.projectKey, this.participantKey)).then(function (grid) {
                    var nodes = grid.nodes.map(function (d) {
                        return new egrid.Node(d.text, d.weight, d.original);
                    });
                    var links = grid.links.map(function (d) {
                        return new egrid.Link(nodes[d.source], nodes[d.target], d.weight);
                    });
                    _this.egm.nodes(nodes).links(links);
                    _this.draw();
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    if (reasons[0]['status'] === 401) {
                        $window.location.href = $rootScope.logoutUrl;
                    }

                    if (reasons[0]['status'] === 404 || reasons[0]['status'] === 500) {
                        $state.go('projects.get.participants.all.list');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });
            }
            ParticipantGridController.prototype.draw = function () {
                d3.select("#display").call(this.egm.display($("#display").width(), $("#display").height()));
                this.egm.draw().focusCenter();
            };
            ParticipantGridController.$inject = ['$window', '$q', '$rootScope', '$stateParams', '$state', '$scope', '$timeout', '$filter', 'alertLifeSpan'];
            return ParticipantGridController;
        })(egrid.app.ControllerBase);
        app.ParticipantGridController = ParticipantGridController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ParticipantGridEditController = (function (_super) {
            __extends(ParticipantGridEditController, _super);
            function ParticipantGridEditController($window, $q, $rootScope, $stateParams, $state, $scope, $modal, $timeout, $filter, alertLifeSpan) {
                var _this = this;
                _super.call(this, $rootScope, $timeout, $filter, alertLifeSpan);
                this.$scope = $scope;
                this.$modal = $modal;
                this.disableCompletion = false;

                var __this = this;
                this.projectKey = $stateParams.projectId;
                this.participantKey = $stateParams.participantId;
                if ($stateParams.disableCompletion) {
                    this.disableCompletion = true;
                }

                var egmui = egrid.egmui();
                this.egm = egmui.egm();
                this.egm.showRemoveLinkButton(true);
                this.egm.options().maxScale = 1;
                this.egm.options().showGuide = true;
                var calcHeight = function () {
                    return $(window).height() - 100;
                };
                d3.select("#display").attr({
                    width: $(window).width(),
                    height: calcHeight() - 50
                }).call(this.egm.display($(window).width(), calcHeight() - 50));
                d3.select(window).on('resize', function () {
                    var width = $(window).width();
                    var height = calcHeight() - 50;
                    d3.select("#display").attr({
                        width: width,
                        height: height
                    });
                    _this.egm.resize(width, height);
                });

                $scope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                    if (!d3.select("#undoButton").classed("disabled") && toState.url != '/detail') {
                        if (!confirm('保存せずにページを移動しようとしています')) {
                            event.preventDefault();
                        }
                    }
                });

                d3.select("#appendNodeButton").call(egmui.appendNodeButton().onClick(function (callback) {
                    return _this.openInputTextDialog(callback);
                }));
                d3.select("#undoButton").call(egmui.undoButton().onEnable(function () {
                    d3.select("#undoButton").classed("disabled", false);
                }).onDisable(function () {
                    d3.select("#undoButton").classed("disabled", true);
                }));
                d3.select("#redoButton").call(egmui.redoButton().onEnable(function () {
                    d3.select("#redoButton").classed("disabled", false);
                }).onDisable(function () {
                    d3.select("#redoButton").classed("disabled", true);
                }));
                d3.select("#saveButton").call(egmui.saveButton().save(function (data) {
                    _this.grid.nodes = data.nodes;
                    _this.grid.links = data.links;
                    $q.when(_this.grid.update()).then(function () {
                        $state.go('projects.get.participants.get.evaluation');

                        _this.showAlert('MESSAGES.OPERATION_SUCCESSFULLY_COMPLETED');
                    }, function () {
                        var reasons = [];
                        for (var _i = 0; _i < (arguments.length - 0); _i++) {
                            reasons[_i] = arguments[_i + 0];
                        }
                        var k = reasons[0].status === 401 ? 'MESSAGES.NOT_AUTHENTICATED' : 'MESSAGES.DESTINATION_IS_NOT_REACHABLE';

                        _this.showAlert(k, 'danger');
                    });
                }));

                d3.select("#exportSVG").on("click", function () {
                    var _this = this;
                    __this.hideNodeController();
                    __this.egm.exportSVG(function (svgText) {
                        var base64svgText = btoa(unescape(encodeURIComponent(svgText)));
                        d3.select(_this).attr({
                            href: "data:image/svg+xml;charset=utf-8;base64," + base64svgText,
                            download: project.name + ' - ' + participant.name + '.svg'
                        });
                    });
                });

                d3.select("#ladderUpButton").call(egmui.radderUpButton().onClick(function (callback) {
                    return _this.openInputTextDialog(callback);
                }).onEnable(function (selection) {
                    return _this.showNodeController(selection);
                }).onDisable(function () {
                    return _this.hideNodeController();
                }));
                d3.select("#ladderDownButton").call(egmui.radderDownButton().onClick(function (callback) {
                    return _this.openInputTextDialog(callback);
                }).onEnable(function (selection) {
                    return _this.showNodeController(selection);
                }).onDisable(function () {
                    return _this.hideNodeController();
                }));
                d3.select("#removeNodeButton").call(egmui.removeNodeButton().onEnable(function (selection) {
                    return _this.showNodeController(selection);
                }).onDisable(function () {
                    return _this.hideNodeController();
                }));
                d3.select("#mergeNodeButton").call(egmui.mergeNodeButton().onEnable(function (selection) {
                    return _this.showNodeController(selection);
                }).onDisable(function () {
                    return _this.hideNodeController();
                }));
                d3.select("#editNodeButton").call(egmui.editNodeButton().onClick(function (callback) {
                    var node = _this.egm.selectedNode();
                    _this.openInputTextDialog(callback, node.text);
                }).onEnable(function (selection) {
                    return _this.showNodeController(selection);
                }).onDisable(function () {
                    return _this.hideNodeController();
                }));

                var project = new egrid.model.Project;
                var participant = new egrid.model.Participant({
                    projectKey: this.projectKey
                });
                $q.when(project.get(this.projectKey));
                $q.when(participant.get(this.participantKey));

                $q.when(egrid.model.ParticipantGrid.get(this.projectKey, this.participantKey)).then(function (grid) {
                    _this.grid = grid;
                    var nodes = grid.nodes.map(function (d) {
                        return new Node(d.text, d.weight, d.original);
                    });
                    var links = grid.links.map(function (d) {
                        return new Link(nodes[d.source], nodes[d.target], d.weight);
                    });
                    _this.egm.nodes(nodes).links(links).draw().focusCenter();
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    if (reasons[0]['status'] === 401) {
                        $window.location.href = $rootScope.logoutUrl;
                    }

                    if (reasons[0]['status'] === 404 || reasons[0]['status'] === 500) {
                        $state.go('projects.get.participants.all.list');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });

                $q.when(egrid.model.ProjectGrid.get(this.projectKey)).then(function (grid) {
                    _this.overallNodes = grid.nodes;
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    if (reasons[0]['status'] === 401) {
                        $window.location.href = $rootScope.logoutUrl;
                    }

                    if (reasons[0]['status'] === 404 || reasons[0]['status'] === 500) {
                        $state.go('projects.get.grids.get.detail');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });
            }
            ParticipantGridEditController.prototype.openInputTextDialog = function (callback, initialText) {
                if (typeof initialText === "undefined") { initialText = ''; }
                var _this = this;
                var texts;
                if (this.disableCompletion) {
                    texts = [];
                } else {
                    var textsDict = {};
                    texts = this.overallNodes.map(function (d) {
                        var obj = {
                            text: d.text,
                            weight: d.weight
                        };
                        d.participants.forEach(function (p) {
                            if (p == _this.participantKey) {
                                obj.weight -= 1;
                            }
                        });
                        textsDict[d.text] = obj;
                        return obj;
                    });
                    this.egm.nodes().forEach(function (node) {
                        if (textsDict[node.text]) {
                            textsDict[node.text].weight += 1;
                        } else {
                            texts.push({
                                text: node.text,
                                weight: 1
                            });
                        }
                    });
                    texts.sort(function (t1, t2) {
                        return t2.weight - t1.weight;
                    });
                }
                var m = this.$modal.open({
                    backdrop: true,
                    keyboard: true,
                    backdropClick: true,
                    templateUrl: '/partials/input-text-dialog.html',
                    controller: function ($scope, $modalInstance) {
                        $scope.result = initialText;
                        $scope.texts = texts;
                        $scope.close = function (result) {
                            $modalInstance.close(result);
                        };
                    }
                });
                m.result.then(function (result) {
                    callback(result);
                });
                this.$scope.$apply();
            };

            ParticipantGridEditController.prototype.showNodeController = function (selection) {
                if (!selection.empty()) {
                    var nodeRect = selection.node().getBoundingClientRect();
                    var controllerWidth = $("#nodeController").width();
                    d3.select("#nodeController").classed("invisible", false).style("top", nodeRect.top + nodeRect.height + 10 - 100 + "px").style("left", nodeRect.left + (nodeRect.width - controllerWidth) / 2 + "px");
                }
            };

            ParticipantGridEditController.prototype.hideNodeController = function () {
                d3.select("#nodeController").classed("invisible", true);
            };

            ParticipantGridEditController.prototype.moveNodeController = function (selection) {
                var nodeRect = selection.node().getBoundingClientRect();
                var controllerWidth = $("#nodeController").width();
                d3.select("#nodeController").style("top", nodeRect.top + nodeRect.height + 10 + "px").style("left", nodeRect.left + (nodeRect.width - controllerWidth) / 2 + "px");
            };

            ParticipantGridEditController.prototype.exportJSON = function ($event) {
                $($event.currentTarget).attr("href", "data:application/json;charset=utf-8," + encodeURIComponent(JSON.stringify(this.egm.grid().toJSON())));
            };
            ParticipantGridEditController.$inject = ['$window', '$q', '$rootScope', '$stateParams', '$state', '$scope', '$modal', '$timeout', '$filter', 'alertLifeSpan'];
            return ParticipantGridEditController;
        })(egrid.app.ControllerBase);
        app.ParticipantGridEditController = ParticipantGridEditController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var PaginationController = (function () {
            function PaginationController() {
                this.currentPage = 1;
                this.reverse = false;
            }
            PaginationController.prototype.changeOrder = function (predicate) {
                if (predicate == this.predicate) {
                    this.reverse = !this.reverse;
                } else {
                    this.currentPage = 1;
                    this.reverse = false;
                    this.predicate = predicate;
                }
            };
            return PaginationController;
        })();
        app.PaginationController = PaginationController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ParticipantListController = (function (_super) {
            __extends(ParticipantListController, _super);
            function ParticipantListController($window, $q, $rootScope, $stateParams) {
                var _this = this;
                _super.call(this);
                this.participants = new egrid.model.ParticipantCollection();

                this.projectId = $stateParams.projectId;
                this.itemsPerPage = 5;
                this.predicate = 'updatedAt';
                this.reverse = true;

                $q.when(this.participants.query(this.projectId)).then(function (participants) {
                    Object.keys(participants).forEach(function (v, i, ar) {
                        _this.participants.addItem(participants[v]);
                    });
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    if (reasons[0]['status'] === 401) {
                        $window.location.href = $rootScope.logoutUrl;
                    }
                });
            }
            ParticipantListController.$inject = ['$window', '$q', '$rootScope', '$stateParams'];
            return ParticipantListController;
        })(egrid.app.PaginationController);
        app.ParticipantListController = ParticipantListController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ProjectController = (function (_super) {
            __extends(ProjectController, _super);
            function ProjectController($window, $q, $rootScope, $stateParams, $state, $scope, $modal, $timeout, $filter, alertLifeSpan) {
                var _this = this;
                _super.call(this, $rootScope, $timeout, $filter, alertLifeSpan);
                this.$window = $window;
                this.$q = $q;
                this.$state = $state;
                this.$modal = $modal;
                this.project = new egrid.model.Project();

                var key = $stateParams.projectId;

                this.$q.when(this.project.get(key)).then(function (p) {
                }, function (reason) {
                    if (reason.status === 401) {
                        _this.$window.location.href = _this.$rootScope.logoutUrl;
                    }

                    if (reason.status === 404 || reason.status === 500) {
                        _this.$state.go('projects.all.list');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });
            }
            ProjectController.prototype.update = function () {
                var _this = this;
                this.$q.when(this.project.save()).then(function (project) {
                    _this.project.name = project.name;
                    _this.project.note = project.note;
                }, function (reason) {
                    if (reason.status === 401) {
                        _this.$window.location.href = _this.$rootScope.logoutUrl;
                    }

                    if (reason.status === 404 || reason.status === 500) {
                        _this.$state.go('projects.all.list');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });
            };

            ProjectController.prototype.confirm = function () {
                var _this = this;
                var modalInstance = this.$modal.open({
                    templateUrl: '/partials/remove-item-dialog.html',
                    controller: function ($scope, $modalInstance) {
                        $scope.ok = function () {
                            $modalInstance.close();
                        }, $scope.cancel = function () {
                            $modalInstance.dismiss();
                        };
                    }
                });

                modalInstance.result.then(function () {
                    _this.remove();
                });
            };

            ProjectController.prototype.remove = function () {
                var _this = this;
                this.$q.when(this.project.remove()).then(function () {
                    _this.$state.go('projects.all.list');
                }, function (reason) {
                    if (reason.status === 401) {
                        _this.$window.location.href = _this.$rootScope.logoutUrl;
                    }

                    if (reason.status === 404 || reason.status === 500) {
                        _this.$state.go('projects.all.list');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });
            };
            ProjectController.$inject = ['$window', '$q', '$rootScope', '$stateParams', '$state', '$scope', '$modal', '$timeout', '$filter', 'alertLifeSpan'];
            return ProjectController;
        })(egrid.app.ControllerBase);
        app.ProjectController = ProjectController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ProjectCreateController = (function (_super) {
            __extends(ProjectCreateController, _super);
            function ProjectCreateController($q, $rootScope, $state, $timeout, $filter, alertLifeSpan) {
                _super.call(this, $rootScope, $timeout, $filter, alertLifeSpan);
                this.$q = $q;
                this.$state = $state;
            }
            ProjectCreateController.prototype.submit = function () {
                var _this = this;
                var project = new egrid.model.Project(this);
                this.$q.when(project.save()).then(function () {
                    _this.$timeout(function () {
                        _this.$state.go('projects.get.detail', { projectId: project.key }, { reload: true });

                        _this.showAlert('MESSAGES.OPERATION_SUCCESSFULLY_COMPLETED');
                    }, 200);
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    var k = reasons[0].status === 401 ? 'MESSAGES.NOT_AUTHENTICATED' : 'MESSAGES.DESTINATION_IS_NOT_REACHABLE';

                    _this.showAlert(k, 'danger');
                });
            };
            ProjectCreateController.$inject = ['$q', '$rootScope', '$state', '$timeout', '$filter', 'alertLifeSpan'];
            return ProjectCreateController;
        })(egrid.app.ControllerBase);
        app.ProjectCreateController = ProjectCreateController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ProjectGridCreateController = (function () {
            function ProjectGridCreateController($window, $q, $rootScope, $stateParams, $state) {
                this.$q = $q;
                this.$state = $state;
                this.projectKey = $stateParams.projectId;

                this.data = new egrid.model.ProjectGrid({
                    projectKey: this.projectKey
                });
            }
            ProjectGridCreateController.prototype.submit = function () {
                var _this = this;
                this.$q.when(this.data.save()).then(function (grid) {
                    _this.$state.go('projects.get.grids.get.detail', { projectGridKey: grid.key });
                });
            };
            ProjectGridCreateController.$inject = ['$window', '$q', '$rootScope', '$stateParams', '$state'];
            return ProjectGridCreateController;
        })();
        app.ProjectGridCreateController = ProjectGridCreateController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ProjectGridEditController = (function (_super) {
            __extends(ProjectGridEditController, _super);
            function ProjectGridEditController($window, $q, $rootScope, $stateParams, $state, $scope, $modal, $timeout, $filter, alertLifeSpan) {
                var _this = this;
                _super.call(this, $rootScope, $timeout, $filter, alertLifeSpan);
                this.$q = $q;
                this.$state = $state;
                this.$scope = $scope;
                this.$modal = $modal;
                this.filter = {};
                this.participants = new egrid.model.ParticipantCollection();
                this.participantState = {};

                var __this = this;
                this.projectKey = $stateParams.projectId;
                this.projectGridKey = $stateParams.projectGridKey;

                var egmui = egrid.egmui();
                this.egm = egmui.egm();
                this.egm.showRemoveLinkButton(true);
                var calcHeight = function () {
                    return $(window).height() - 100;
                };
                d3.select("#display").attr({
                    width: $(window).width(),
                    height: calcHeight()
                }).call(this.egm.display($(window).width(), calcHeight()));
                d3.select(window).on('resize', function () {
                    d3.select("#display").attr({
                        width: $(window).width(),
                        height: calcHeight()
                    });
                });

                d3.select("#undoButton").call(egmui.undoButton().onEnable(function () {
                    d3.select("#undoButton").classed("disabled", false);
                }).onDisable(function () {
                    d3.select("#undoButton").classed("disabled", true);
                }));
                d3.select("#redoButton").call(egmui.redoButton().onEnable(function () {
                    d3.select("#redoButton").classed("disabled", false);
                }).onDisable(function () {
                    d3.select("#redoButton").classed("disabled", true);
                }));

                d3.select("#exportSVG").on("click", function () {
                    var _this = this;
                    __this.hideNodeController();
                    __this.egm.exportSVG(function (svgText) {
                        var base64svgText = btoa(encodeURIComponent(svgText));
                        d3.select(_this).attr({
                            href: "data:image/svg+xml;charset=utf-8;base64," + base64svgText,
                            download: project.name + '.svg'
                        });
                    });
                });

                d3.select("#removeNodeButton").call(egmui.removeNodeButton().onEnable(function (selection) {
                    return _this.showNodeController(selection);
                }).onDisable(function () {
                    return _this.hideNodeController();
                }));
                d3.select("#mergeNodeButton").call(egmui.mergeNodeButton().onEnable(function (selection) {
                    return _this.showNodeController(selection);
                }).onDisable(function () {
                    return _this.hideNodeController();
                }));
                d3.select("#editNodeButton").call(egmui.editNodeButton().onClick(function (callback) {
                    var node = _this.egm.selectedNode();
                    _this.openInputTextDialog(callback, node.text);
                }).onEnable(function (selection) {
                    return _this.showNodeController(selection);
                }).onDisable(function () {
                    return _this.hideNodeController();
                }));

                d3.select("#filterButton").on("click", function () {
                    var node = _this.egm.selectedNode();
                    _this.participants.toArray().forEach(function (participant) {
                        if (node) {
                            _this.participantState[participant.key] = node.participants.indexOf(participant.key) >= 0;
                        } else {
                            _this.participantState[participant.key] = false;
                        }
                    });
                    var m = $modal.open({
                        backdrop: true,
                        keyboard: true,
                        backdropClick: true,
                        templateUrl: '/partials/filter-participants-dialog.html',
                        controller: function ($scope, $modalInstance) {
                            $scope.results = _this.filter;
                            $scope.participants = _this.participants;
                            $scope.active = _this.participantState;
                            $scope.close = function () {
                                $modalInstance.close($scope.results);
                            };
                        }
                    });
                    m.result.then(function (result) {
                        _this.egm.nodes().forEach(function (d) {
                            d.active = d.participants.some(function (key) {
                                return result[key];
                            });
                        });
                        _this.egm.draw().focusCenter();
                    });
                    $scope.$apply();
                });

                d3.select("#layoutButton").on("click", function () {
                    var m = $modal.open({
                        backdrop: true,
                        keyboard: true,
                        backdropClick: true,
                        templateUrl: '/partials/setting-dialog.html',
                        controller: function ($scope, $modalInstance) {
                            $scope.options = _this.egm.options();
                            $scope.ViewMode = egrid.ViewMode;
                            $scope.InactiveNode = egrid.InactiveNode;
                            $scope.RankDirection = egrid.RankDirection;
                            $scope.ScaleType = egrid.ScaleType;
                            $scope.close = function () {
                                $modalInstance.close();
                            };
                        }
                    });
                    m.result.then(function () {
                        _this.egm.draw().focusCenter();
                    });
                    $scope.$apply();
                });

                var project = new egrid.model.Project;

                this.$q.when(project.get(this.projectKey));

                this.$q.when(egrid.model.ProjectGrid.get(this.projectKey, this.projectGridKey)).then(function (grid) {
                    _this.grid = grid;
                    var nodes = grid.nodes.map(function (d) {
                        return new Node(d.text, d.weight, d.original, d.participants);
                    });
                    var links = grid.links.map(function (d) {
                        return new Link(nodes[d.source], nodes[d.target], d.weight);
                    });
                    _this.egm.nodes(nodes).links(links).draw().focusCenter();
                }, function (reason) {
                    if (reason.status === 401) {
                        $window.location.href = _this.$rootScope.logoutUrl;
                    }

                    if (reason.status === 404 || reason.status === 500) {
                        _this.$state.go('projects.all.list');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });

                this.$q.when(this.participants.query(this.projectKey)).then(function (participants) {
                    Object.keys(participants).forEach(function (v, i, ar) {
                        _this.participants.addItem(participants[v]);
                    });

                    _this.participants.toArray().forEach(function (participant) {
                        _this.participantState[participant.key] = false;
                        _this.filter[participant.key] = true;
                    });
                }, function (reason) {
                    if (reason.status === 401) {
                        $window.location.href = _this.$rootScope.logoutUrl;
                    }

                    if (reason.status === 404 || reason.status === 500) {
                        _this.$state.go('projects.all.list');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });
            }
            ProjectGridEditController.prototype.save = function () {
                var _this = this;
                this.grid.nodes = this.egm.grid().nodes();
                this.grid.links = this.egm.grid().links().map(function (link) {
                    return {
                        source: link.source.index,
                        target: link.target.index,
                        weight: link.weight
                    };
                });
                this.$q.when(this.grid.save()).then(function (grid) {
                    _this.$state.go('projects.get.evaluation', { projectId: grid.projectKey });

                    _this.showAlert('MESSAGES.OPERATION_SUCCESSFULLY_COMPLETED');
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    var k = reasons[0].status === 401 ? 'MESSAGES.NOT_AUTHENTICATED' : 'MESSAGES.DESTINATION_IS_NOT_REACHABLE';

                    _this.showAlert(k, 'danger');
                });
            };

            ProjectGridEditController.prototype.openInputTextDialog = function (callback, initialText) {
                if (typeof initialText === "undefined") { initialText = ''; }
                var texts = [];
                var m = this.$modal.open({
                    backdrop: true,
                    keyboard: true,
                    backdropClick: true,
                    templateUrl: '/partials/input-text-dialog.html',
                    controller: function ($scope, $modalInstance) {
                        $scope.result = initialText;
                        $scope.texts = texts;
                        $scope.close = function (result) {
                            $modalInstance.close(result);
                        };
                    }
                });
                m.result.then(function (result) {
                    callback(result);
                });
                this.$scope.$apply();
            };

            ProjectGridEditController.prototype.showNodeController = function (selection) {
                if (!selection.empty()) {
                    var nodeRect = selection.node().getBoundingClientRect();
                    var controllerWidth = $("#nodeController").width();
                    d3.select("#nodeController").classed("invisible", false).style("top", nodeRect.top + nodeRect.height + 10 - 100 + "px").style("left", nodeRect.left + (nodeRect.width - controllerWidth) / 2 + "px");
                }
            };

            ProjectGridEditController.prototype.hideNodeController = function () {
                d3.select("#nodeController").classed("invisible", true);
            };

            ProjectGridEditController.prototype.moveNodeController = function (selection) {
                var nodeRect = selection.node().getBoundingClientRect();
                var controllerWidth = $("#nodeController").width();
                d3.select("#nodeController").style("top", nodeRect.top + nodeRect.height + 10 + "px").style("left", nodeRect.left + (nodeRect.width - controllerWidth) / 2 + "px");
            };
            ProjectGridEditController.$inject = ['$window', '$q', '$rootScope', '$stateParams', '$state', '$scope', '$modal', '$timeout', '$filter', 'alertLifeSpan'];
            return ProjectGridEditController;
        })(egrid.app.ControllerBase);
        app.ProjectGridEditController = ProjectGridEditController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ProjectGridListController = (function (_super) {
            __extends(ProjectGridListController, _super);
            function ProjectGridListController($window, $q, $rootScope, $stateParams, $state, $timeout, $filter, alertLifeSpan) {
                var _this = this;
                _super.call(this, $rootScope, $timeout, $filter, alertLifeSpan);

                this.projectKey = $stateParams.projectId;

                $q.when(egrid.model.ProjectGrid.query(this.projectKey)).then(function (grids) {
                    _this.list = grids;
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    if (reasons[0]['status'] === 401) {
                        $window.location.href = $rootScope.logoutUrl;
                    }

                    if (reasons[0]['status'] === 404 || reasons[0]['status'] === 500) {
                        $state.go('projects.get.detail');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });
            }
            ProjectGridListController.$inject = ['$window', '$q', '$rootScope', '$stateParams', '$state', '$timeout', '$filter', 'alertLifeSpan'];
            return ProjectGridListController;
        })(egrid.app.ControllerBase);
        app.ProjectGridListController = ProjectGridListController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var ProjectListController = (function (_super) {
            __extends(ProjectListController, _super);
            function ProjectListController($window, $q, $rootScope) {
                var _this = this;
                _super.call(this);
                this.projects = new egrid.model.ProjectCollection();

                this.itemsPerPage = 5;
                this.predicate = 'updatedAt';
                this.reverse = true;

                $q.when(this.projects.query()).then(function (projects) {
                    Object.keys(projects).forEach(function (v, i, ar) {
                        _this.projects.addItem(projects[v]);
                    });
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    if (reasons[0]['status'] === 401) {
                        $window.location.href = $rootScope.logoutUrl;
                    }
                });
            }
            ProjectListController.$inject = ['$window', '$q', '$rootScope'];
            return ProjectListController;
        })(egrid.app.PaginationController);
        app.ProjectListController = ProjectListController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var SemProjectController = (function (_super) {
            __extends(SemProjectController, _super);
            function SemProjectController($window, $q, $rootScope, $stateParams, $state, $timeout, $filter, alertLifeSpan) {
                var _this = this;
                _super.call(this, $rootScope, $timeout, $filter, alertLifeSpan);

                this.semProject = new egrid.model.SemProject({ projectKey: $stateParams.projectId });

                $q.when(this.semProject.get($stateParams.semProjectId)).then(function (p) {
                }, function (reason) {
                    if (reason.status === 401) {
                        $window.location.href = $rootScope.logoutUrl;
                    }

                    if (reason.status === 404 || reason.status === 500) {
                        $state.go('projects.get.analyses.all.list');

                        _this.showAlert('MESSAGES.ITEM_NOT_FOUND', 'warning');
                    }
                });
            }
            SemProjectController.$inject = ['$window', '$q', '$rootScope', '$stateParams', '$state', '$timeout', '$filter', 'alertLifeSpan'];
            return SemProjectController;
        })(egrid.app.ControllerBase);
        app.SemProjectController = SemProjectController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var SemProjectAnalysisController = (function () {
            function SemProjectAnalysisController() {
            }
            SemProjectAnalysisController.$inject = [];
            return SemProjectAnalysisController;
        })();
        app.SemProjectAnalysisController = SemProjectAnalysisController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var SemProjectCreateController = (function (_super) {
            __extends(SemProjectCreateController, _super);
            function SemProjectCreateController($q, $rootScope, $stateParams, $state, $timeout, $filter, alertLifeSpan) {
                _super.call(this, $rootScope, $timeout, $filter, alertLifeSpan);
                this.$q = $q;
                this.$state = $state;

                this.projectKey = $stateParams.projectId;
            }
            SemProjectCreateController.prototype.submit = function () {
                var _this = this;
                var semProject = new egrid.model.SemProject(this);
                this.$q.when(semProject.save()).then(function () {
                    _this.$timeout(function () {
                        _this.$state.go('projects.get.analyses.all.list');

                        _this.showAlert('MESSAGES.OPERATION_SUCCESSFULLY_COMPLETED');
                    }, 200);
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    var k = reasons[0].status === 401 ? 'MESSAGES.NOT_AUTHENTICATED' : 'MESSAGES.DESTINATION_IS_NOT_REACHABLE';

                    _this.showAlert(k, 'danger');
                });
            };
            SemProjectCreateController.$inject = ['$q', '$stateParams', '$state', '$timeout', '$filter', 'alertLifeSpan'];
            return SemProjectCreateController;
        })(egrid.app.ControllerBase);
        app.SemProjectCreateController = SemProjectCreateController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var SemProjectQuestionnaireEditController = (function () {
            function SemProjectQuestionnaireEditController($q, $stateParams, $location) {
                var _this = this;
                this.$q = $q;
                this.$location = $location;
                this.projectKey = $stateParams.projectId;
                this.semProjectKey = $stateParams.semProjectId;
                this.data = new egrid.model.SemProjectQuestionnaire({
                    projectKey: this.projectKey,
                    semProjectKey: this.semProjectKey
                });

                this.egm = new EGM;
                this.overallEgm = new EGM;

                $q.when(egrid.model.ProjectGrid.get(this.projectKey)).then(function (grid) {
                    var width = $("#sem-questionnaire-deisgn-display").width();
                    var height = $("#sem-questionnaire-deisgn-display").height();
                    d3.select("#sem-questionnaire-design-display svg").call(_this.egm.display(width, height));
                    var nodes = grid.nodes.map(function (d) {
                        return new Node(d.text, d.weight, d.original, d.participants);
                    });
                    var links = grid.links.map(function (d) {
                        return new Link(nodes[d.source], nodes[d.target], d.weight);
                    });
                    _this.overallEgm.nodes(nodes).links(links);
                    _this.items = nodes.map(function (node) {
                        return {
                            text: node.text,
                            weight: node.weight,
                            checked: false,
                            title: node.text,
                            description: node.text + 'を5段階で評価してください。\n1:悪い 5:良い'
                        };
                    });
                    _this.items.sort(function (item1, item2) {
                        return item2.weight - item1.weight;
                    });
                });
            }
            SemProjectQuestionnaireEditController.prototype.updateItems = function () {
                var _this = this;
                var itemDict = {};
                this.items.forEach(function (item) {
                    itemDict[item.text] = item.checked;
                });
                this.data.items = this.items.filter(function (item) {
                    return item.checked;
                });
                var nodes = [];
                var links = [];
                this.overallEgm.nodes().forEach(function (node) {
                    if (itemDict[node.text]) {
                        var newNode = new egrid.Node(node.text);
                        newNode.index = node.index;
                        nodes.push(newNode);
                    }
                });
                nodes.forEach(function (node1) {
                    nodes.forEach(function (node2) {
                        if (node1.index != node2.index && _this.overallEgm.grid().hasPath(node1.index, node2.index)) {
                            links.push(new egrid.Link(node1, node2));
                        }
                    });
                });
                this.egm.nodes(nodes).links(links).draw().focusCenter();
            };

            SemProjectQuestionnaireEditController.prototype.submit = function () {
                this.$q.when(this.data.save()).then(function () {
                });
            };
            SemProjectQuestionnaireEditController.$inject = ['$window', '$q', '$rootScope', '$stateParams'];
            return SemProjectQuestionnaireEditController;
        })();
        app.SemProjectQuestionnaireEditController = SemProjectQuestionnaireEditController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        var SemProjectListController = (function () {
            function SemProjectListController($window, $q, $rootScope, $stateParams, $state) {
                var _this = this;
                this.$q = $q;
                this.$state = $state;
                this.semProjects = new egrid.model.SemProjectCollection();
                this.projectId = $stateParams.projectId;

                this.$q.when(this.semProjects.query(this.projectId)).then(function (semProjects) {
                    Object.keys(semProjects).forEach(function (v, i, ar) {
                        _this.semProjects.addItem(semProjects[v]);
                    });
                }, function () {
                    var reasons = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        reasons[_i] = arguments[_i + 0];
                    }
                    if (reasons[0]['status'] === 401) {
                        $window.location.href = $rootScope.logoutUrl;
                    }
                });
            }
            SemProjectListController.$inject = ['$window', '$q', '$rootScope', '$stateParams', '$state'];
            return SemProjectListController;
        })();
        app.SemProjectListController = SemProjectListController;
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
var egrid;
(function (egrid) {
    (function (app) {
        angular.module('collaboegm', ['paginator', 'ui.router', "ui.bootstrap", "pascalprecht.translate"]).directive('focusMe', [
            '$timeout', function ($timeout) {
                return {
                    link: function (scope, element, attrs, model) {
                        $timeout(function () {
                            element[0].focus();
                        }, 10);
                    }
                };
            }]).config([
            '$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
                $stateProvider.state('projects', {
                    abstract: true
                }).state('projects.all', {
                    abstract: true,
                    url: egrid.app.Url.projectListUrlBase + '/all',
                    views: {
                        '@': {
                            templateUrl: '/partials/projects/projects.html'
                        }
                    }
                }).state('projects.all.create', {
                    url: '/create',
                    views: {
                        'content@projects.all': {
                            controller: 'ProjectCreateController as newProject',
                            templateUrl: '/partials/projects/create.html'
                        }
                    }
                }).state('projects.all.list', {
                    url: '/list',
                    views: {
                        'content@projects.all': {
                            controller: 'ProjectListController as ctrl',
                            templateUrl: '/partials/projects/list.html'
                        }
                    }
                }).state('projects.get', {
                    abstract: true,
                    url: egrid.app.Url.projectUrlBase,
                    views: {
                        '@': {
                            controller: 'ProjectController as ctrl',
                            templateUrl: '/partials/project/project.html'
                        }
                    }
                }).state('projects.get.analyses', {
                    abstract: true,
                    url: '/sem-projects'
                }).state('projects.get.analyses.all', {
                    abstract: true,
                    url: '/all',
                    views: {
                        'content@projects.get': {
                            templateUrl: '/partials/project/analyses/analyses.html'
                        }
                    }
                }).state('projects.get.analyses.all.create', {
                    url: '/create',
                    views: {
                        'content@projects.get.analyses.all': {
                            templateUrl: '/partials/project/analyses/create.html'
                        }
                    }
                }).state('projects.get.analyses.all.list', {
                    url: '/list',
                    views: {
                        'content@projects.get.analyses.all': {
                            controller: 'SemProjectListController as ctrl',
                            templateUrl: '/partials/project/analyses/list.html'
                        }
                    }
                }).state('projects.get.analyses.get', {
                    abstract: true,
                    url: '/:semProjectId',
                    views: {
                        '@': {
                            controller: 'SemProjectController as semProject',
                            templateUrl: '/partials/project/analyses/analysis/analysis.html'
                        },
                        'content@projects.get.analyses.get': {
                            controller: 'SemProjectQuestionnaireEditController as questionnaire'
                        }
                    }
                }).state('projects.get.analyses.get.analysis', {
                    url: '/analysis',
                    views: {
                        'content@projects.get.analyses.get': {
                            templateUrl: '/partials/project/analyses/analysis/analyses.html'
                        }
                    }
                }).state('projects.get.analyses.get.design', {
                    url: '/design',
                    views: {
                        'content@projects.get.analyses.get': {
                            templateUrl: '/partials/project/analyses/analysis/design.html'
                        }
                    }
                }).state('projects.get.analyses.get.questionnaire', {
                    url: '/questionnaire',
                    views: {
                        'content@projects.get.analyses.get': {
                            templateUrl: '/partials/project/analyses/analysis/questionnaire.html'
                        }
                    }
                }).state('projects.get.collaborators', {
                    abstract: true,
                    url: '/collaborators'
                }).state('projects.get.collaborators.all', {
                    abstract: true,
                    url: '/all',
                    views: {
                        'content@projects.get': {
                            templateUrl: '/partials/project/collaborators/collaborators.html'
                        }
                    }
                }).state('projects.get.collaborators.all.create', {
                    url: '/create',
                    views: {
                        'c@projects.get.collaborators.all': {
                            controller: 'CollaboratorCreateController as newCollaborator',
                            templateUrl: '/partials/project/collaborators/create.html'
                        }
                    }
                }).state('projects.get.collaborators.all.list', {
                    url: '/list',
                    views: {
                        'c@projects.get.collaborators.all': {
                            controller: 'CollaboratorListController as collaborators',
                            templateUrl: '/partials/project/collaborators/list.html'
                        }
                    }
                }).state('projects.get.detail', {
                    url: '/detail',
                    views: {
                        'content@projects.get': {
                            templateUrl: '/partials/project/detail.html'
                        }
                    }
                }).state('projects.get.evaluation', {
                    url: '/evaluation',
                    views: {
                        'content@projects.get': {
                            templateUrl: '/partials/project/evaluation.html'
                        }
                    }
                }).state('projects.get.grids', {
                    abstract: true,
                    url: '/grids'
                }).state('projects.get.grids.all', {
                    abstract: true,
                    url: '/all',
                    views: {
                        'content@projects.get': {
                            templateUrl: '/partials/project/participants/participants.html'
                        }
                    }
                }).state('projects.get.grids.all.list', {
                    abstract: true,
                    url: '/list',
                    views: {
                        'content@projects.get.grid.all': {
                            controller: 'ProjectGridEditController as projectGrid',
                            templateUrl: '/partials/project-grid-edit.html'
                        }
                    }
                }).state('projects.get.grids.get', {
                    abstract: true,
                    url: '/:projectGridKey'
                }).state('projects.get.grids.get.detail', {
                    url: '/detail',
                    views: {
                        '@': {
                            controller: 'ProjectGridEditController as projectGrid',
                            templateUrl: '/partials/project-grid-edit.html'
                        }
                    }
                }).state('projects.get.participants', {
                    abstract: true,
                    url: '/participants'
                }).state('projects.get.participants.all', {
                    abstract: true,
                    url: '/all',
                    views: {
                        'content@projects.get': {
                            templateUrl: '/partials/project/participants/participants.html'
                        }
                    }
                }).state('projects.get.participants.all.create', {
                    url: '/create',
                    views: {
                        'content@projects.get.participants.all': {
                            controller: 'ParticipantCreateController as newParticipant',
                            templateUrl: '/partials/project/participants/create.html'
                        }
                    }
                }).state('projects.get.participants.all.list', {
                    url: '/list',
                    views: {
                        'content@projects.get.participants.all': {
                            controller: 'ParticipantListController as ctrl',
                            templateUrl: '/partials/project/participants/list.html'
                        }
                    }
                }).state('projects.get.participants.get', {
                    abstract: true,
                    url: '/:participantId',
                    views: {
                        '@': {
                            controller: 'ParticipantController as ctrl',
                            templateUrl: '/partials/project/participants/participant/participant.html'
                        }
                    }
                }).state('projects.get.participants.get.detail', {
                    url: '/detail',
                    views: {
                        'content@projects.get.participants.get': {
                            templateUrl: '/partials/project/participants/participant/detail.html'
                        }
                    }
                }).state('projects.get.participants.get.evaluation', {
                    url: '/evaluation',
                    views: {
                        'content@projects.get.participants.get': {
                            templateUrl: '/partials/project/participants/participant/evaluation.html'
                        }
                    }
                }).state('projects.get.participants.get.grid', {
                    url: '/grid?disableCompletion',
                    views: {
                        '@': {
                            controller: 'ParticipantGridEditController as participantGrid',
                            templateUrl: '/partials/egm-edit.html'
                        }
                    }
                }).state("help", {
                    templateUrl: '/partials/help.html',
                    url: '/help'
                }).state("about", {
                    templateUrl: '/partials/about.html',
                    url: '/about'
                });

                $urlRouterProvider.otherwise(egrid.app.Url.projectListUrlBase + '/all/list');
            }]).filter('count', function () {
            return function (input) {
                return input.length;
            };
        }).config([
            "$translateProvider", function ($translateProvider) {
                $translateProvider.useStaticFilesLoader({
                    prefix: 'locations/',
                    suffix: '.json'
                }).fallbackLanguage("en").preferredLanguage("ja");
            }]).value('alertLifeSpan', 3200).controller('CollaboratorCreateController', egrid.app.CollaboratorCreateController).controller('CollaboratorListController', egrid.app.CollaboratorListController).controller('ParticipantController', egrid.app.ParticipantController).controller('ParticipantCreateController', egrid.app.ParticipantCreateController).controller('ParticipantGridController', egrid.app.ParticipantGridController).controller('ParticipantGridEditController', egrid.app.ParticipantGridEditController).controller('ParticipantListController', egrid.app.ParticipantListController).controller('ProjectController', egrid.app.ProjectController).controller('ProjectCreateController', egrid.app.ProjectCreateController).controller('ProjectGridCreateController', egrid.app.ProjectGridCreateController).controller('ProjectGridEditController', egrid.app.ProjectGridEditController).controller('ProjectGridListController', egrid.app.ProjectGridListController).controller('ProjectListController', egrid.app.ProjectListController).controller('SemProjectController', egrid.app.SemProjectController).controller('SemProjectAnalysisController', egrid.app.SemProjectAnalysisController).controller('SemProjectCreateController', egrid.app.SemProjectCreateController).controller('SemProjectListController', egrid.app.SemProjectListController).controller('SemProjectQuestionnaireEditController', egrid.app.SemProjectQuestionnaireEditController).run([
            '$rootScope', '$translate', '$http', function ($rootScope, $translate, $http) {
                $rootScope.alerts = [];
                $rootScope.Url = egrid.app.Url;

                $rootScope.changeLanguage = function (langKey) {
                    $translate.use(langKey);
                    $http({
                        method: "POST",
                        url: '/api/users',
                        data: {
                            location: langKey
                        }
                    });
                };

                $http.get("/api/users").success(function (user) {
                    $rootScope.user = user;
                    $translate.use(user.location);
                });

                var dest_url = "/";
                $http.get("/api/users/logout?dest_url=" + encodeURIComponent(dest_url)).success(function (data) {
                    $rootScope.logoutUrl = data.logout_url;
                });
            }]);
    })(egrid.app || (egrid.app = {}));
    var app = egrid.app;
})(egrid || (egrid = {}));
